name: CI/CD Pipeline - EntryTracker

on:
  push:
    branches:
      - main

jobs:
  Build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start EntryTracker
        run: |
          nohup python app.py > app.log 2>&1 &
          sleep 10

      - name: Run Tests
        run: |
          curl --fail http://localhost:5000 || (echo "App did not respond!" && cat app.log && exit 1)

  Package-application:
    needs: Build-application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t entrytracker:latest .
          docker save entrytracker:latest -o entrytracker.tar
          echo "Docker image saved as entrytracker.tar"

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: entrytracker-image
          path: entrytracker.tar

  E2E-tests:
    needs: Package-application
    runs-on: ubuntu-latest
    
    steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Docker Compose
          run: docker compose version

        - name: Start E2E environment with docker compose
          run: |
            docker compose up -d --build
            sleep 15
        - name: Run E2E test with curl
          run: |
            curl --fail http://localhost:5000 || (echo "E2E test failed!" && docker compose logs && exit 1)
        
        - name: Shut down E2E environment
          run: docker compose down -v

  Push-to-ECR:
    needs: E2E-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: entrytracker-image
  
      - name: Load Docker image from tar
        run: |
          docker load -i entrytracker.tar
          echo "Docker image loaded from entrytracker.tar"
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 033567013533.dkr.ecr.ap-south-1.amazonaws.com
    
      - name: Get latest patch version and bump it
        id: versioning
        run: |
          set -e
          repo="entrytracker-develeap"
  
          latest=$(aws ecr list-images \
            --repository-name $repo \
            --query 'imageIds[*].imageTag' \
            --output text | tr '\t' '\n' | grep -E '^1\.0\.[0-9]+$' | sort -V | tail -n1)

          if [ -z "$latest" ]; then
            new_version="1.0.0"
          else
            patch=$(echo "$latest" | cut -d. -f3)
            new_patch=$((patch + 1))
            new_version="1.0.${new_patch}"
          fi

          echo "📦 New image version: $new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Tag Docker images
        run: |
          docker tag entrytracker:latest 033567013533.dkr.ecr.ap-south-1.amazonaws.com/entrytracker-develeap:latest
          docker tag entrytracker:latest 033567013533.dkr.ecr.ap-south-1.amazonaws.com/entrytracker-develeap:${{ steps.versioning.outputs.version }}

      - name: Push Docker images to ECR
        run: |
          docker push 033567013533.dkr.ecr.ap-south-1.amazonaws.com/entrytracker-develeap:latest
          docker push 033567013533.dkr.ecr.ap-south-1.amazonaws.com/entrytracker-develeap:${{ steps.versioning.outputs.version }}

  Deploy-to-EC2:
    needs: Push-to-ECR
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH client
        run: |
            sudo apt-get update
            sudo apt-get install -y openssh-client
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 400 ~/.ssh/deploy_key.pem
      - name: Deploy to EC2 via SSH
        run: |
         ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
         "set -e && \
         echo '🔐 Logging in to Amazon ECR...' && \
         aws ecr get-login-password --region ${{ secrets.ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }} && \
         echo '📁 Navigating to app directory...' && \
         cd ~ && \
         echo '⬇️ Pulling latest image...' && \
         docker compose pull && \
         echo '🚀 Restarting containers...' && \
         docker compose up -d"