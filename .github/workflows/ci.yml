name: CI/CD Pipeline - EntryTracker

on:
  push:
    branches:
      - main
permissions:
  contents: write

jobs:
  Build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Start EntryTracker
        run: |
          nohup python app.py > app.log 2>&1 &

          echo "Waiting for EntryTracker to start..."
          for i in {1..30}; do
          if curl -sSf http://localhost:5000 > /dev/null; then
          echo "✅ EntryTracker is up!"
          break
          fi
          echo "⏳ Still waiting for EntryTracker... ($i)"
          sleep 1
          done

          # Final check (fail if still not responding)
          curl --fail http://localhost:5000 || (echo "❌ App did not respond!" && cat app.log && exit 1)

  Package-application:
    needs: Build-application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t entrytracker:latest .
          docker save entrytracker:latest -o entrytracker.tar
          echo "Docker image saved as entrytracker.tar"

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: entrytracker-image
          path: entrytracker.tar

  E2E-tests:
    needs: Package-application
    runs-on: ubuntu-latest
    
    steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Start E2E environment with docker compose
          run: |
            docker compose up -d --build

        - name: Wait for EntryTracker to be fully ready (DB included)
          run: |
            echo "⏳ Waiting for EntryTracker to connect to DB..."
            for i in {1..30}; do
              response=$(curl -s http://localhost:5000 || echo "")
              echo "📡 Response attempt $i:"
              echo "$response"
              if echo "$response" | grep -q '"message": "Data fetched successfully from the database."'; then
                echo "✅ EntryTracker is fully connected to the database!"
                exit 0
              else
                echo "🕐 Waiting... ($i)"
                sleep 1
              fi
            done
            echo "❌ EntryTracker did not connect to the database in time."
            exit 1



  Push-to-ECR:
    needs: E2E-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: entrytracker-image

      - name: Load Docker image from tar
        run: |
          docker load -i entrytracker.tar
          echo "✅ Docker image loaded from artifact"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.ECR_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}

      - name: Get the latest Git tag and bump patch version
        id: versioning
        run: |
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            new_tag="v1.0.0"
          else
            major=$(echo $latest_tag | cut -d '.' -f 1 | sed 's/v//')
            minor=$(echo $latest_tag | cut -d '.' -f 2)
            patch=$(echo $latest_tag | cut -d '.' -f 3)
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
          fi

          echo "✅ New Git tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and push Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.versioning.outputs.new_tag }}
          git push origin ${{ steps.versioning.outputs.new_tag }}

      - name: Tag Docker images
        run: |
          docker tag entrytracker:latest ${{ secrets.ECR_REPO_URI }}:latest
          docker tag entrytracker:latest ${{ secrets.ECR_REPO_URI }}:${{ steps.versioning.outputs.new_tag }}

      - name: Push Docker images to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URI }}:latest
          docker push ${{ secrets.ECR_REPO_URI }}:${{ steps.versioning.outputs.new_tag }}
          
      - name: Push Git tags
        run: git push --tags       



  Deploy-to-EC2:
    needs: Push-to-ECR
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH client
        run: |
            sudo apt-get update
            sudo apt-get install -y openssh-client
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 400 ~/.ssh/deploy_key.pem

      - name: Deploy to EC2 with SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.ECR_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}
            cd ~
            docker compose pull
            docker compose up -d
